spring.h2.console.enabled=true
spring.h2.console.path=/h2

spring.datasource.url=jdbc:h2:mem:memDb;DB_CLOSE_DELAY=-1
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.hibernate.ddl-auto=update

server.port = 3030

#-------------------------------------------------------------------------------------------------------#

ScenarioDescription1 = A company with Waterfall or Agile culture, architecture, design, and processes that has attempted to lift and shift its current system (and comfortable way of doing things) onto the cloud. On the Maturity Matrix, Infrastructure has moved all the way to Containers/Hybrid Cloud while all other categories remain rooted around Waterfall/Agile status

ProblemDescription1 = Operating costs will go up. Few, if any, benefits will be gained. Time and money will be wasted: you now have a bunch of expensive, complex tools on top of the same system you always had, but you are not faster or cheaper.

Solution1 = An honest and thorough assessment of current state is essential before moving forward in any aspect of a cloud migration. Start at the very beginning of the Cloud Native Transformation Roadmap with Stage One, Assessment, and you will emerge with a clear vision, a high-level architectural direction, and alignment among leaders in the company.

#-------------------------------------------------------------------------------------------------------#

ScenarioDescription2 = The CN portion of the transition gets placed within the scope of Agile coaches and thus gets led by them. And/or the project is handed to an IT team, added to the backlog of their usual tasks. This is a genuine paradigm shift, but Agile sees it as only a simple platform iteration. Install Kubernetes, two sprints, done

ProblemDescription2 = This results in CN tools such as Kubernetes, CI/CD (Continuous Integration and Continuous Deployment) and Microservices being treated simply as normal extensions of Agile, which they are not. Cloud Native adds many completely new complexities, and requires a very different approach.

Solution2 = Take small steps for a gradual transformation. Start by trying out an initial small side experiment that encompasses the major elements of CN: an architecture of containerised microservices communicating via APIs, developed and delivered through CI/CD, and implemented/orchestrated on a fully automated cloud platform. This prototype app can be very basic, but it does need to be functional. Such small experiments are part of step two of Container Solutions process, Design.

#-------------------------------------------------------------------------------------------------------#

ScenarioDescription3 = Companies whose main codebase is in a deep legacy language that decide it’s time to scrap it and build a brand new Cloud Native system. The result: a stalled (or even failing) attempt to build a completely new system after six months of dedicated all or nothing effort. Meanwhile, there has been no development at all on the old system

ProblemDescription3 = Confusion, chaos, and a deeply frustrated and unhappy team. You cannot just go all in—assign all your COBOL engineers to shift to Kubernetes. You may as well ask them to fly your mainframe to the moon.

Solution3 = If you have a strong system that requires few or no changes and it is stable, just keep it. Package it so that it sits on one server and works forever. After that, you design and then create new pieces that talk to the old piece (phases two and three of Container Solutions process, Design and Build). Make a tiny greenfield Cloud Native platform and then slowly move one piece over at a time, refactoring and rebuilding your platform as you go. It is a very slow, iterative, long-term process, not a quick re-creation of your legacy system only now in the cloud (see scenario one, Lift and Shift). But it works.

#-------------------------------------------------------------------------------------------------------#

ScenarioDescription4 = A company has decided to move into the cloud, and adopts one new practice or technology (Microservices, DevOps, Kubernetes) without considering the impact upon all other areas in the organisation. This one area looks like a spike on an otherwise uniform matrix line

ProblemDescription4 = These initiatives rarely lead to success because teams very quickly run into all kinds of problems they never considered. Gridlock ensues: they know they have a problem, but they do not know enough to even begin to understand what to do about it.

Solution4 = A combination of steps one, two, and three of the Cloud Native Transformation process. The first need is to establish executive commitment to the transformation, including a defined vision and a (high-level) plan for proceeding (step one, Think). From there, step two (Design) protocols establish the architecture and all major design decisions. These are explored through proofs of concept (PoCs) and experiments, so there is buy-in from teams across the organisation. Step three, Build, begins when the optimal transformation path has been identified and it is time to begin building a minimal viable product (MVP) version of the new Cloud Native platform

#-------------------------------------------------------------------------------------------------------#

titles = "`Lift And Shift` Move To Cloud Infastructure,Treating Cloud Native As Simply A Technical Upgrade,The GreenField Myth/The `All or Nothing` Approach,`Spiking` CN Transformation Via An Unbalanced Approach"

#-------------------------------------------------------------------------------------------------------#
